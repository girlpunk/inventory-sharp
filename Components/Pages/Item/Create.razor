@page "/Item/Create"
@using System.ComponentModel.DataAnnotations
@using ActualLab.CommandR
@using InventorySharp.Commands
@using InventorySharp.Models
@using InventorySharp.Services
@inject IForeignServerService ForeignServerService
@inject ICommander Commander
@inject NavigationManager NavigationManager

<h3>Create</h3>

<EditForm Model="@Model" OnValidSubmit="Submit">
    <fieldset class="fieldset bg-base-200 border-base-300 rounded-box w-xs border p-4">
        <legend class="fieldset-legend">Item Details</legend>

        <label class="label">Name</label>
        <InputText @bind-Value="Model.Name" class="input" max-length="120" DisplayName="Name" />

        <label class="label">Description</label>
        <InputTextArea @bind-Value="Model.Description" class="input" max-length="2024" DisplayName="Description"/>

        <label class="label">Parent</label>
        @* <InputSelect @bind-Value="Model.ParentId" DisplayName="Parent" class="select"> *@
        @* </InputSelect> *@
        <input Value="@Model.ParentId.ToString()" class="input" DisplayName="Parent" />
    </fieldset>

    <fieldset class="fieldset bg-base-200 border-base-300 rounded-box w-xs border p-4">
        <legend class="fieldset-legend">Label Details</legend>

        <label class="label">Identifier</label>
        <InputText @bind-Value="Model.Identifier" class="input" max-length="256" DisplayName="Identifier"/>

        <label class="label">Label Type</label>
        <div class="filter">
            <InputRadioGroup @bind-Value="Model.LabelType" DisplayName="Label Type" >
                <InputRadio class="btn filter-reset" TValue="LabelType?" Value="@null"/>
                @foreach (var tagType in (LabelType[])Enum.GetValuesAsUnderlyingType<LabelType>())
                {
                    <InputRadio class="btn" Value="@tagType" aria-label="@tagType">@tagType</InputRadio>
                }
            </InputRadioGroup>
        </div>

        <label class="label">Foreign Server</label>
        <input Value="@Model.ForeignServerId.ToString()" class="input" DisplayName="Foreign Server"/>
        @* <InputSelect @bind-Value="Model.ForeignServerId" DisplayName="Foreign Server" class="select"> *@
        @* </InputSelect> *@
        @if (Model.ForeignServerId == null &&
             (Model.Identifier.StartsWith("https://", StringComparison.OrdinalIgnoreCase) ||
              Model.Identifier.StartsWith("http://", StringComparison.OrdinalIgnoreCase)))
        {
            <button class="btn mt-4" @onclick="ConvertNamespace">Convert to Foreign Server</button>
        }
    </fieldset>

    <button class="btn btn-neutral mt-4" type="submit">Login</button>
</EditForm>

@code {
    [SupplyParameterFromQuery(Name = "scanner")]
    public Guid? ScannerId { get; set; }

    [SupplyParameterFromQuery(Name = "type")]
    public int? LabelTypeRaw {
        get => (int?)LabelType;
        set => LabelType = (LabelType?) value;
    }

    public LabelType? LabelType { get; set; }

    [SupplyParameterFromQuery(Name = "identifier")]
    public string? Identifier { get; set; }

    [SupplyParameterFromQuery(Name = "latitude")]
    public double? Latitude { get; set; }

    [SupplyParameterFromQuery(Name = "longitude")]
    public double? Longitude { get; set; }

    private CreateModel Model { get; set; } = new();

    private class CreateModel
    {
        // Item stuff
        /// <summary>
        /// Name of the item
        /// </summary>
        [MaxLength(120)]
        public string? Name { get; set; }

        /// <summary>
        /// Description of the item
        /// </summary>
        [MaxLength(1024)]
        public string? Description { get; set; }

        /// <summary>
        /// ID of the item's parent, or null for no parent
        /// </summary>
        public Guid? ParentId { get; set; }

        /// <summary>
        /// Identifier shown on the label
        /// </summary>
        [MaxLength(256)]
        public string Identifier { get; set; } = "";

        /// <summary>
        /// What type of label this is
        /// </summary>
        public LabelType LabelType { get; set; }

        /// <summary>
        /// ID of the foreign server the item belongs to, or null for no foreign server
        /// </summary>
        public Guid? ForeignServerId { get; set; }
    }

    private async Task Submit()
    {
        //Create Item
        var item = await Commander.Call(new CreateCommand<Item>()
        {
            Obj = new Item()
            {
                Created = DateTime.Now,
                Description = Model.Description,
                Name = Model.Name,
                ParentId = Model.ParentId,
            }
        });

        //Create Label
        var label = await Commander.Call(new CreateCommand<ItemLabel>()
        {
            Obj = new ItemLabel()
            {
                Identifier = Model.Identifier,
                LabelType = Model.LabelType,
                ItemId = item.Id,
                ForeignServerId = Model.ForeignServerId,
                Created = DateTime.Now,
            }
        });

        //Create Scan
        var scan = await Commander.Call(new ScanLabelCommand()
        {
            LabelId = label.Id,
            ScannerId = ScannerId,
            LabelType = Model.LabelType,
            //TODO: Make optional
            CreateScanRecord = true,
            ScannerLatitude = Latitude,
            ScannerLongitude = Longitude
        });

        //Go to scan page
        NavigationManager.NavigateTo($"/Scan/{scan.ScanId}");
    }

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (LabelType != null)
            Model.LabelType = LabelType.Value;

        if (Identifier != null)
        {
            if (Identifier.StartsWith("https://", StringComparison.OrdinalIgnoreCase) ||
                Identifier.StartsWith("http://", StringComparison.OrdinalIgnoreCase))
            {
                //https://r.lu.gl/a/A808AZ

                var url = new Uri(Identifier, UriKind.Absolute);

                Model.Identifier = Identifier;

                var foreignServer = await ForeignServerService.Find(url.Host);
                if (foreignServer != null)
                {
                    Model.ForeignServerId = foreignServer;
                    Model.Identifier = url.AbsolutePath;
                }
            }
            else
            {
                Model.Identifier = Identifier;
            }
        }
    }

    private async Task ConvertNamespace()
    {
        var url = new Uri(Model.Identifier, UriKind.Absolute);

        var foreignServer = await Commander.Call(new CreateCommand<ForeignServer>
        {
            Obj = new ForeignServer
            {
                Namespace = url.Host
            }
        });

        Model.ForeignServerId = foreignServer.Id;
        Model.Identifier = url.AbsolutePath;
    }
}
