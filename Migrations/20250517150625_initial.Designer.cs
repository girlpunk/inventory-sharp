// <auto-generated />
using System;
using InventorySharp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventorySharp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250517150625_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ActualLab.Fusion.EntityFramework.Operations.DbEvent", b =>
                {
                    b.Property<string>("Uuid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DelayUntil")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Uuid");

                    b.HasIndex("DelayUntil");

                    b.HasIndex("State", "DelayUntil");

                    b.ToTable("_Events");
                });

            modelBuilder.Entity("ActualLab.Fusion.EntityFramework.Operations.DbOperation", b =>
                {
                    b.Property<long>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommandJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsJson")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NestedOperations")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Index");

                    b.HasIndex("LoggedAt");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("_Operations");
                });

            modelBuilder.Entity("InventorySharp.Models.ForeignServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ForeignServers");
                });

            modelBuilder.Entity("InventorySharp.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ForeignServerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ForeignServerId");

                    b.HasIndex("ParentId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("InventorySharp.Models.ItemLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LabelType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemLabels");
                });

            modelBuilder.Entity("InventorySharp.Models.ItemPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Uploaded")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemPhotos");
                });

            modelBuilder.Entity("InventorySharp.Models.ItemScan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemTagId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("ScanType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Scanned")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScannerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemScans");
                });

            modelBuilder.Entity("InventorySharp.Models.ItemTag", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId", "Tag");

                    b.ToTable("ItemTags");
                });

            modelBuilder.Entity("InventorySharp.Models.Scanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScannerType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Scanners");
                });

            modelBuilder.Entity("InventorySharp.Models.Item", b =>
                {
                    b.HasOne("InventorySharp.Models.ForeignServer", "ForeignServer")
                        .WithMany()
                        .HasForeignKey("ForeignServerId");

                    b.HasOne("InventorySharp.Models.Item", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ForeignServer");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("InventorySharp.Models.ItemLabel", b =>
                {
                    b.HasOne("InventorySharp.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySharp.Models.ItemPhoto", b =>
                {
                    b.HasOne("InventorySharp.Models.Item", "Item")
                        .WithMany("Photos")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySharp.Models.ItemScan", b =>
                {
                    b.HasOne("InventorySharp.Models.Item", null)
                        .WithMany("Scans")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventorySharp.Models.ItemTag", b =>
                {
                    b.HasOne("InventorySharp.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySharp.Models.Item", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Scans");
                });
#pragma warning restore 612, 618
        }
    }
}
