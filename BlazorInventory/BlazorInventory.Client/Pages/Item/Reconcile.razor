@page "/Item/{id:guid}/reconcile"
@attribute [Authorize]
@using ActualLab.Collections
@using ActualLab.CommandR
@using BlazorInventory.Abstractions.Models
@using BlazorInventory.Abstractions.Service
@inject IItemService ItemService
@inject IItemService IScanService

<h3>Reconciliation</h3>

<Flex Orientation="Orientation.Horizontal">
    <Flex>
        <Card Style="width: 300px;">
            <Text TextStyle="TextStyle.Overline">Outstanding Items</Text>
            <Text TextStyle="TextStyle.H4">@OutstandingItems.Count</Text>
        </Card>

        <GridRow Style="max-height: 500px;">
            <GridCol Span="12">
                Remaining:
                <ul>
                @foreach (var item in OutstandingItems)
                {
                    <li>@item.Name</li>
                }
                </ul>
            </GridCol>
            <GridCol Span="12">
                Completed:
                <ul>
                    @foreach (var item in CompletedItems)
                    {
                        <li>@item.Name</li>
                    }
                </ul>
            </GridCol>
        </GridRow>
    </Flex>
    <Flex>
        <Card Style="width: 300px;">
            <Text TextStyle="TextStyle.Overline">Completed Items</Text>
            <Text TextStyle="TextStyle.H4">@CompletedItems.Count</Text>
        </Card>
    </Flex>
</Flex>

@code {
    private ICollection<Item> OutstandingItems { get; } = [];
    private ICollection<Item> CompletedItems { get; } = [];
    private Item? Item { get; set; }

    /// <summary>
    /// ID of the item to reconcile the contents of
    /// </summary>
    [Parameter]
    public Guid? Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Item == null && Id != null)
        {
            Item = await ItemService.Get(Id.Value);
            OutstandingItems.AddRange(await ItemService.ListChildren(Id.Value));
        }
    }
}
