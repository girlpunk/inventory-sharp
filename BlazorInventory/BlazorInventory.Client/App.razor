@using ActualLab.CommandR
@using ActualLab.DependencyInjection
@using ActualLab.OS
@inherits CircuitHubComponentBase

<Router AppAssembly="typeof(Program).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(Layout.MainLayout)"/>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(Layout.MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

<AntContainer />

@code {
    private ISessionResolver SessionResolver => CircuitHub.SessionResolver;

    [Parameter] public string SessionId { get; set; } = "";
    [Parameter] public string RenderModeKey { get; set; } = "";

    protected override void OnInitialized()
    {
        if (OSInfo.IsWebAssembly) {
            // RPC auto-substitutes Session.Default to the cookie-based one on the server side for every call
            SessionResolver.Session = Session.Default;
            // That's how WASM app starts hosted services
            var rootServices = Services.Commander().Services;
            _ = rootServices.HostedServices().Start();
        }
        else {
            SessionResolver.Session = new Session(SessionId);
        }
        if (CircuitHub.IsInteractive)
            CircuitHub.Initialize(this.GetDispatcher(), RenderModeDef.GetOrDefault(RenderModeKey));
    }
}
