@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorInventory.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor

<PageTitle>Manage email</PageTitle>

<h3>Manage email</h3>

<StatusMessage Message="@_message"/>

<Form Model="@Input" Submit="@OnValidSubmitAsync()">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-danger" role="alert"/>

    <FormItem Text="Email">
        <Input @bind-Value="@_email" ReadOnly="true" Disabled="true"/>
    </FormItem>

    <FormItem Text="New email" Required>
        <Input @bind-Value="@Input.NewEmail" Name="NewEmail" AutoCompleteType="AutoCompleteType.Email" Placeholder="Enter a new email" aria-required="true"/>
    </FormItem>

    <Button Type="@ButtonType.Primary" Size="ButtonSize.Large">Change Email</Button>
</Form>

@code {
    private string? _message;
    private ApplicationUser _user = default!;
    private string? _email;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _email = await UserManager.GetEmailAsync(_user);

        Input.NewEmail ??= _email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == _email)
        {
            _message = "Your email is unchanged.";
            return;
        }

        var code = await UserManager.GenerateChangeEmailTokenAsync(_user, Input.NewEmail);
        var setUserNameResult = await UserManager.ChangeEmailAsync(_user, Input.NewEmail, code);

        if (!setUserNameResult.Succeeded)
        {
            _message = "Error changing user name.";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        _message = "Thank you for confirming your email change.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
